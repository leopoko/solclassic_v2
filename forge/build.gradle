plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
        mixinConfig "solclassic-forge.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle (project(path: ':common', configuration: 'transformProductionForge'))
    //modCompileOnly project(":common")
    //modRuntimeOnly project(":common")



    //implementation "squeek.appleskin:appleskin-forge:mc1.20.1-2.5.1:api"
    modCompileOnlyApi "squeek.appleskin:appleskin-forge:mc1.20.1-2.5.1:api"

    modRuntimeOnly "curse.maven:farmers-delight-398521:4638874"
    modRuntimeOnly "mezz.jei:jei-1.20.1-forge:15.20.0.106"
    modRuntimeOnly "squeek.appleskin:appleskin-forge:mc1.20.1-2.5.1"
    //modRuntimeOnly "curse.maven:diet-443570:4813904"
    //modRuntimeOnly "curse.maven:spectrelib-993948:5217603"
    //modRuntimeOnly files("libs/pizzadelight-1.20.1-1.0.0.jar")
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}