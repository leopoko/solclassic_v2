plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    //modCompileOnlyApi "squeek.appleskin:appleskin-fabric:mc1.20-2.5.1:api"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.2.3"
    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.2.3"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.2.3"
    include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:5.2.3"

    modRuntimeOnly "mezz.jei:jei-1.20.1-fabric:15.20.0.106"
    modRuntimeOnly "squeek.appleskin:appleskin-fabric:mc1.20-2.5.1"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
